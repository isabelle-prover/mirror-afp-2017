<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://www.isa-afp.org/rss.xml" rel="self" type="application/rss+xml" />
    <title>Archive of Formal Proofs</title>
    <link>https://www.isa-afp.org</link>
    <description>
      The Archive of Formal Proofs is a collection of proof libraries, examples,
      and larger scientific developments, mechanically checked
      in the theorem prover Isabelle.
    </description>
    <pubDate>14 Aug 2018 00:00:00 +0000</pubDate>
    <item>
       <title>Minsky Machines</title>
              <link>https://www.isa-afp.org/entries/Minsky_Machines.html</link>
       <guid>https://www.isa-afp.org/entries/Minsky_Machines.html</guid>
       <dc:creator> Bertram Felgenhauer       </dc:creator>
       <pubDate>14 Aug 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; We formalize undecidablity results for Minsky machines. To
this end, we also formalize recursive inseparability.
&lt;/p&gt;&lt;p&gt; We start by proving that Minsky machines can
compute arbitrary primitive recursive and recursive functions. We then
show that there is a deterministic Minsky machine with one argument
and two final states such that the set of inputs that are accepted in
one state is recursively inseparable from the set of inputs that are
accepted in the other state. &lt;/p&gt;&lt;p&gt; As a corollary, the
set of Minsky configurations that reach the first state but not the
second recursively inseparable from the set of Minsky configurations
that reach the second state but not the first. In particular both
these sets are undecidable. &lt;/p&gt;&lt;p&gt; We do
&lt;em&gt;not&lt;/em&gt; prove that recursive functions can simulate
Minsky machines. &lt;/p&gt;</description>
    </item>
    <item>
       <title>Pricing in discrete financial models</title>
              <link>https://www.isa-afp.org/entries/DiscretePricing.html</link>
       <guid>https://www.isa-afp.org/entries/DiscretePricing.html</guid>
       <dc:creator> Mnacho Echenim       </dc:creator>
       <pubDate>16 Jul 2018 00:00:00 +0000</pubDate>
       <description>
We have formalized the computation of fair prices for derivative
products in discrete financial models. As an application, we derive a
way to compute fair prices of derivative products in the
Cox-Ross-Rubinstein model of a financial market, thus completing the
work that was presented in this &lt;a
href=&#34;https://hal.archives-ouvertes.fr/hal-01562944&#34;&gt;paper&lt;/a&gt;.</description>
    </item>
    <item>
       <title>Pell's Equation</title>
              <link>https://www.isa-afp.org/entries/Pell.html</link>
       <guid>https://www.isa-afp.org/entries/Pell.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>23 Jun 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; This article gives the basic theory of Pell&#39;s equation
&lt;em&gt;x&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; = 1 +
&lt;em&gt;D&lt;/em&gt;&amp;thinsp;&lt;em&gt;y&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;,
where
&lt;em&gt;D&lt;/em&gt;&amp;thinsp;&amp;isin;&amp;thinsp;&amp;#8469; is
a parameter and &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt; are
integer variables. &lt;/p&gt; &lt;p&gt; The main result that is proven
is the following: If &lt;em&gt;D&lt;/em&gt; is not a perfect square,
then there exists a &lt;em&gt;fundamental solution&lt;/em&gt;
(&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;,
&lt;em&gt;y&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;) that is not the
trivial solution (1, 0) and which generates all other solutions
(&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;) in the sense that
there exists some
&lt;em&gt;n&lt;/em&gt;&amp;thinsp;&amp;isin;&amp;thinsp;&amp;#8469;
such that |&lt;em&gt;x&lt;/em&gt;| +
|&lt;em&gt;y&lt;/em&gt;|&amp;thinsp;&amp;radic;&lt;span
style=&#34;text-decoration:
overline&#34;&gt;&lt;em&gt;D&lt;/em&gt;&lt;/span&gt; =
(&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; +
&lt;em&gt;y&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;&amp;thinsp;&amp;radic;&lt;span
style=&#34;text-decoration:
overline&#34;&gt;&lt;em&gt;D&lt;/em&gt;&lt;/span&gt;)&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;.
This also implies that the set of solutions is infinite, and it gives
us an explicit and executable characterisation of all the solutions.
&lt;/p&gt; &lt;p&gt; Based on this, simple executable algorithms for
computing the fundamental solution and the infinite sequence of all
non-negative solutions are also provided. &lt;/p&gt;</description>
    </item>
    <item>
       <title>Projective Geometry</title>
              <link>https://www.isa-afp.org/entries/Projective_Geometry.html</link>
       <guid>https://www.isa-afp.org/entries/Projective_Geometry.html</guid>
       <dc:creator> Anthony Bordg       </dc:creator>
       <pubDate>14 Jun 2018 00:00:00 +0000</pubDate>
       <description>
We formalize the basics of projective geometry. In particular, we give
a proof of the so-called Hessenberg&#39;s theorem in projective plane
geometry. We also provide a proof of the so-called Desargues&#39;s
theorem based on an axiomatization of (higher) projective space
geometry using the notion of rank of a matroid. This last approach
allows to handle incidence relations in an homogeneous way dealing
only with points and without the need of talking explicitly about
lines, planes or any higher entity.</description>
    </item>
    <item>
       <title>The Localization of a Commutative Ring</title>
              <link>https://www.isa-afp.org/entries/Localization_Ring.html</link>
       <guid>https://www.isa-afp.org/entries/Localization_Ring.html</guid>
       <dc:creator> Anthony Bordg       </dc:creator>
       <pubDate>14 Jun 2018 00:00:00 +0000</pubDate>
       <description>
We formalize the localization of a commutative ring R with respect to
a multiplicative subset (i.e. a submonoid of R seen as a
multiplicative monoid). This localization is itself a commutative ring
and we build the natural homomorphism of rings from R to its
localization.</description>
    </item>
    <item>
       <title>Optimal Binary Search Trees</title>
              <link>https://www.isa-afp.org/entries/Optimal_BST.html</link>
       <guid>https://www.isa-afp.org/entries/Optimal_BST.html</guid>
       <dc:creator> Tobias Nipkow, Dániel Somogyi       </dc:creator>
       <pubDate>27 May 2018 00:00:00 +0000</pubDate>
       <description>
This article formalizes recursive algorithms for the construction
of optimal binary search trees given fixed access frequencies.
We follow Knuth (1971), Yao (1980) and Mehlhorn (1984).
The algorithms are memoized with the help of the AFP article
&lt;a href=&#34;Monad_Memo_DP.html&#34;&gt;Monadification, Memoization and Dynamic Programming&lt;/a&gt;,
thus yielding dynamic programming algorithms.</description>
    </item>
    <item>
       <title>Hidden Markov Models</title>
              <link>https://www.isa-afp.org/entries/Hidden_Markov_Models.html</link>
       <guid>https://www.isa-afp.org/entries/Hidden_Markov_Models.html</guid>
       <dc:creator> Simon Wimmer       </dc:creator>
       <pubDate>25 May 2018 00:00:00 +0000</pubDate>
       <description>
This entry contains a formalization of hidden Markov models [3] based
on Johannes Hölzl&#39;s formalization of discrete time Markov chains
[1]. The basic definitions are provided and the correctness of two
main (dynamic programming) algorithms for hidden Markov models is
proved: the forward algorithm for computing the likelihood of an
observed sequence, and the Viterbi algorithm for decoding the most
probable hidden state sequence. The Viterbi algorithm is made
executable including memoization.  Hidden markov models have various
applications in natural language processing. For an introduction see
Jurafsky and Martin [2].</description>
    </item>
    <item>
       <title>Probabilistic Timed Automata</title>
              <link>https://www.isa-afp.org/entries/Probabilistic_Timed_Automata.html</link>
       <guid>https://www.isa-afp.org/entries/Probabilistic_Timed_Automata.html</guid>
       <dc:creator> Simon Wimmer, Johannes Hölzl       </dc:creator>
       <pubDate>24 May 2018 00:00:00 +0000</pubDate>
       <description>
We present a formalization of probabilistic timed automata (PTA) for
which we try to follow the formula MDP + TA = PTA as far as possible:
our work starts from our existing formalizations of Markov decision
processes (MDP) and timed automata (TA) and combines them modularly.
We prove the fundamental result for probabilistic timed automata: the
region construction that is known from timed automata carries over to
the probabilistic setting. In particular, this allows us to prove that
minimum and maximum reachability probabilities can be computed via a
reduction to MDP model checking, including the case where one wants to
disregard unrealizable behavior. Further information can be found in
our ITP paper [2].</description>
    </item>
    <item>
       <title>Irrational Rapidly Convergent Series</title>
              <link>https://www.isa-afp.org/entries/Irrationality_J_Hancl.html</link>
       <guid>https://www.isa-afp.org/entries/Irrationality_J_Hancl.html</guid>
       <dc:creator> Angeliki Koutsoukou Argyraki, Wenda Li       </dc:creator>
       <pubDate>23 May 2018 00:00:00 +0000</pubDate>
       <description>
We formalize with Isabelle/HOL a proof of a theorem by J. Hancl asserting the
irrationality of the sum of a series consisting of rational numbers, built up
by sequences that fulfill certain properties. Even though the criterion is a
number theoretic result, the proof makes use only of analytical arguments. We
also formalize a corollary of the theorem for a specific series fulfilling the
assumptions of the theorem.</description>
    </item>
    <item>
       <title>Axiom Systems for Category Theory in Free Logic</title>
              <link>https://www.isa-afp.org/entries/AxiomaticCategoryTheory.html</link>
       <guid>https://www.isa-afp.org/entries/AxiomaticCategoryTheory.html</guid>
       <dc:creator> Christoph Benzmüller, Dana Scott       </dc:creator>
       <pubDate>23 May 2018 00:00:00 +0000</pubDate>
       <description>
This document provides a concise overview on the core results of our
previous work on the exploration of axioms systems for category
theory. Extending the previous studies
(http://arxiv.org/abs/1609.01493) we include one further axiomatic
theory in our experiments. This additional theory has been suggested
by Mac Lane in 1948. We show that the axioms proposed by Mac Lane are
equivalent to the ones we studied before, which includes an axioms set
suggested by Scott in the 1970s and another axioms set proposed by
Freyd and Scedrov in 1990, which we slightly modified to remedy a
minor technical issue.</description>
    </item>
    <item>
       <title>Monadification, Memoization and Dynamic Programming</title>
              <link>https://www.isa-afp.org/entries/Monad_Memo_DP.html</link>
       <guid>https://www.isa-afp.org/entries/Monad_Memo_DP.html</guid>
       <dc:creator> Simon Wimmer, Shuwei Hu, Tobias Nipkow       </dc:creator>
       <pubDate>22 May 2018 00:00:00 +0000</pubDate>
       <description>
We present a lightweight framework for the automatic verified
(functional or imperative) memoization of recursive functions. Our
tool can turn a pure Isabelle/HOL function definition into a
monadified version in a state monad or the Imperative HOL heap monad,
and prove a correspondence theorem. We provide a variety of memory
implementations for the two types of monads. A number of simple
techniques allow us to achieve bottom-up computation and
space-efficient memoization. The framework’s utility is demonstrated
on a number of representative dynamic programming problems. A detailed
description of our work can be found in the accompanying paper [2].</description>
    </item>
    <item>
       <title>OpSets: Sequential Specifications for Replicated Datatypes</title>
              <link>https://www.isa-afp.org/entries/OpSets.html</link>
       <guid>https://www.isa-afp.org/entries/OpSets.html</guid>
       <dc:creator> Martin Kleppmann, Victor B. F. Gomes, Dominic P. Mulligan, Alastair R. Beresford       </dc:creator>
       <pubDate>10 May 2018 00:00:00 +0000</pubDate>
       <description>
We introduce OpSets, an executable framework for specifying and
reasoning about the semantics of replicated datatypes that provide
eventual consistency in a distributed system, and for mechanically
verifying algorithms that implement these datatypes. Our approach is
simple but expressive, allowing us to succinctly specify a variety of
abstract datatypes, including maps, sets, lists, text, graphs, trees,
and registers. Our datatypes are also composable, enabling the
construction of complex data structures. To demonstrate the utility of
OpSets for analysing replication algorithms, we highlight an important
correctness property for collaborative text editing that has
traditionally been overlooked; algorithms that do not satisfy this
property can exhibit awkward interleaving of text. We use OpSets to
specify this correctness property and prove that although one existing
replication algorithm satisfies this property, several other published
algorithms do not.</description>
    </item>
    <item>
       <title>An Isabelle/HOL Formalization of the Modular Assembly Kit for Security Properties</title>
              <link>https://www.isa-afp.org/entries/Modular_Assembly_Kit_Security.html</link>
       <guid>https://www.isa-afp.org/entries/Modular_Assembly_Kit_Security.html</guid>
       <dc:creator> Oliver Bračevac, Richard Gay, Sylvia Grewe, Heiko Mantel, Henning Sudbrock, Markus Tasch       </dc:creator>
       <pubDate>07 May 2018 00:00:00 +0000</pubDate>
       <description>
The &#34;Modular Assembly Kit for Security Properties&#34; (MAKS) is
a framework for both the definition and verification of possibilistic
information-flow security properties at the specification-level. MAKS
supports the uniform representation of a wide range of possibilistic
information-flow properties and provides support for the verification
of such properties via unwinding results and compositionality results.
We provide a formalization of this framework in Isabelle/HOL.</description>
    </item>
    <item>
       <title>WebAssembly</title>
              <link>https://www.isa-afp.org/entries/WebAssembly.html</link>
       <guid>https://www.isa-afp.org/entries/WebAssembly.html</guid>
       <dc:creator> Conrad Watt       </dc:creator>
       <pubDate>29 Apr 2018 00:00:00 +0000</pubDate>
       <description>
This is a mechanised specification of the WebAssembly language, drawn
mainly from the previously published paper formalisation of Haas et
al. Also included is a full proof of soundness of the type system,
together with a verified type checker and interpreter. We include only
a partial procedure for the extraction of the type checker and
interpreter here. For more details, please see our paper in CPP 2018.</description>
    </item>
    <item>
       <title>VerifyThis 2018 - Polished Isabelle Solutions</title>
              <link>https://www.isa-afp.org/entries/VerifyThis2018.html</link>
       <guid>https://www.isa-afp.org/entries/VerifyThis2018.html</guid>
       <dc:creator> Peter Lammich, Simon Wimmer       </dc:creator>
       <pubDate>27 Apr 2018 00:00:00 +0000</pubDate>
       <description>
&lt;a
href=&#34;http://www.pm.inf.ethz.ch/research/verifythis.html&#34;&gt;VerifyThis
2018&lt;/a&gt; was a program verification competition associated with
ETAPS 2018. It was the 7th event in the VerifyThis competition series.
In this entry, we present polished and completed versions of our
solutions that we created during the competition.</description>
    </item>
    <item>
       <title>Bounded Natural Functors with Covariance and Contravariance</title>
              <link>https://www.isa-afp.org/entries/BNF_CC.html</link>
       <guid>https://www.isa-afp.org/entries/BNF_CC.html</guid>
       <dc:creator> Andreas Lochbihler, Joshua Schneider       </dc:creator>
       <pubDate>24 Apr 2018 00:00:00 +0000</pubDate>
       <description>
Bounded natural functors (BNFs) provide a modular framework for the
construction of (co)datatypes in higher-order logic.  Their functorial
operations, the mapper and relator, are restricted to a subset of the
parameters, namely those where recursion can take place.  For certain
applications, such as free theorems, data refinement, quotients, and
generalised rewriting, it is desirable that these operations do not
ignore the other parameters.  In this article, we formalise the
generalisation BNF&lt;sub&gt;CC&lt;/sub&gt; that extends the mapper
and relator to covariant and contravariant parameters.  We show that
&lt;ol&gt; &lt;li&gt; BNF&lt;sub&gt;CC&lt;/sub&gt;s are closed under
functor composition and least and greatest fixpoints,&lt;/li&gt;
&lt;li&gt; subtypes inherit the BNF&lt;sub&gt;CC&lt;/sub&gt; structure
under conditions that generalise those for the BNF case,
and&lt;/li&gt; &lt;li&gt; BNF&lt;sub&gt;CC&lt;/sub&gt;s preserve
quotients under mild conditions.&lt;/li&gt; &lt;/ol&gt; These proofs
are carried out for abstract BNF&lt;sub&gt;CC&lt;/sub&gt;s similar to
the AFP entry BNF Operations.  In addition, we apply the
BNF&lt;sub&gt;CC&lt;/sub&gt; theory to several concrete functors.</description>
    </item>
    <item>
       <title>The Incompatibility of Fishburn-Strategyproofness and Pareto-Efficiency</title>
              <link>https://www.isa-afp.org/entries/Fishburn_Impossibility.html</link>
       <guid>https://www.isa-afp.org/entries/Fishburn_Impossibility.html</guid>
       <dc:creator> Felix Brandt, Manuel Eberl, Christian Saile, Christian Stricker       </dc:creator>
       <pubDate>22 Mar 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This formalisation contains the proof that there is no
anonymous Social Choice Function for at least three agents and
alternatives that fulfils both Pareto-Efficiency and
Fishburn-Strategyproofness. It was derived from a proof of &lt;a
href=&#34;http://dss.in.tum.de/files/brandt-research/stratset.pdf&#34;&gt;Brandt
&lt;em&gt;et al.&lt;/em&gt;&lt;/a&gt;, which relies on an unverified
translation of a fixed finite instance of the original problem to SAT.
This Isabelle proof contains a machine-checked version of both the
statement for exactly three agents and alternatives and the lifting to
the general case.&lt;/p&gt;</description>
    </item>
    <item>
       <title>Weight-Balanced Trees</title>
              <link>https://www.isa-afp.org/entries/Weight_Balanced_Trees.html</link>
       <guid>https://www.isa-afp.org/entries/Weight_Balanced_Trees.html</guid>
       <dc:creator> Tobias Nipkow, Stefan Dirix       </dc:creator>
       <pubDate>13 Mar 2018 00:00:00 +0000</pubDate>
       <description>
This theory provides a verified implementation of weight-balanced
trees following the work of &lt;a
href=&#34;https://doi.org/10.1017/S0956796811000104&#34;&gt;Hirai
and Yamamoto&lt;/a&gt; who proved that all parameters in a certain
range are valid, i.e. guarantee that insertion and deletion preserve
weight-balance. Instead of a general theorem we provide parameterized
proofs of preservation of the invariant that work for many (all?)
valid parameters.</description>
    </item>
    <item>
       <title>A Theory of Architectural Design Patterns</title>
              <link>https://www.isa-afp.org/entries/Architectural_Design_Patterns.html</link>
       <guid>https://www.isa-afp.org/entries/Architectural_Design_Patterns.html</guid>
       <dc:creator> Diego Marmsoler       </dc:creator>
       <pubDate>01 Mar 2018 00:00:00 +0000</pubDate>
       <description>
The following document formalizes and verifies several architectural
design patterns. Each pattern specification is formalized in terms of
a locale where the locale assumptions correspond to the assumptions
which a pattern poses on an architecture. Thus, pattern specifications
may build on top of each other by interpreting the corresponding
locale. A pattern is verified using the framework provided by the AFP
entry Dynamic Architectures. Currently, the document consists of
formalizations of 4 different patterns: the singleton, the publisher
subscriber, the blackboard pattern, and the blockchain pattern.
Thereby, the publisher component of the publisher subscriber pattern
is modeled as an instance of the singleton pattern and the blackboard
pattern is modeled as an instance of the publisher subscriber pattern.
In general, this entry provides the first steps towards an overall
theory of architectural design patterns.</description>
    </item>
    <item>
       <title>Hoare Logics for Time Bounds</title>
              <link>https://www.isa-afp.org/entries/Hoare_Time.html</link>
       <guid>https://www.isa-afp.org/entries/Hoare_Time.html</guid>
       <dc:creator> Maximilian P. L. Haslbeck, Tobias Nipkow       </dc:creator>
       <pubDate>26 Feb 2018 00:00:00 +0000</pubDate>
       <description>
We study three different Hoare logics for reasoning about time bounds
of imperative programs and formalize them in Isabelle/HOL: a classical
Hoare like logic due to Nielson, a logic with potentials due to
Carbonneaux &lt;i&gt;et al.&lt;/i&gt; and a &lt;i&gt;separation
logic&lt;/i&gt; following work by Atkey, Chaguérand and Pottier.
These logics are formally shown to be sound and complete. Verification
condition generators are developed and are shown sound and complete
too.  We also consider variants of the systems where we abstract from
multiplicative constants in the running time bounds, thus supporting a
big-O style of reasoning.  Finally we compare the expressive power of
the three systems.</description>
    </item>
    <item>
       <title>Treaps</title>
              <link>https://www.isa-afp.org/entries/Treaps.html</link>
       <guid>https://www.isa-afp.org/entries/Treaps.html</guid>
       <dc:creator> Max Haslbeck, Manuel Eberl, Tobias Nipkow       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; A Treap is a binary tree whose nodes contain pairs
consisting of some payload and an associated priority. It must have
the search-tree property w.r.t. the payloads and the heap property
w.r.t. the priorities. Treaps are an interesting data structure that
is related to binary search trees (BSTs) in the following way: if one
forgets all the priorities of a treap, the resulting BST is exactly
the same as if one had inserted the elements into an empty BST in
order of ascending priority. This means that a treap behaves like a
BST where we can pretend the elements were inserted in a different
order from the one in which they were actually inserted. &lt;/p&gt;
&lt;p&gt; In particular, by choosing these priorities at random upon
insertion of an element, we can pretend that we inserted the elements
in &lt;em&gt;random order&lt;/em&gt;, so that the shape of the
resulting tree is that of a random BST no matter in what order we
insert the elements. This is the main result of this
formalisation.&lt;/p&gt;</description>
    </item>
    <item>
       <title>A verified factorization algorithm for integer polynomials with polynomial complexity</title>
              <link>https://www.isa-afp.org/entries/LLL_Factorization.html</link>
       <guid>https://www.isa-afp.org/entries/LLL_Factorization.html</guid>
       <dc:creator> Jose Divasón, Sebastiaan Joosten, René Thiemann, Akihisa Yamada       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
Short vectors in lattices and factors of integer polynomials are
related. Each factor of an integer polynomial belongs to a certain
lattice. When factoring polynomials, the condition that we are looking
for an irreducible polynomial means that we must look for a small
element in a lattice, which can be done by a basis reduction
algorithm. In this development we formalize this connection and
thereby one main application of the LLL basis reduction algorithm: an
algorithm to factor square-free integer polynomials which runs in
polynomial time. The work is based on our previous
Berlekamp–Zassenhaus development, where the exponential reconstruction
phase has been replaced by the polynomial-time basis reduction
algorithm. Thanks to this formalization we found a serious flaw in a
textbook.</description>
    </item>
    <item>
       <title>First-Order Terms</title>
              <link>https://www.isa-afp.org/entries/First_Order_Terms.html</link>
       <guid>https://www.isa-afp.org/entries/First_Order_Terms.html</guid>
       <dc:creator> Christian Sternagel, René Thiemann       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
We formalize basic results on first-order terms, including a
first-order unification algorithm, as well as well-foundedness of the
subsumption order. This entry is part of the &lt;i&gt;Isabelle
Formalization of Rewriting&lt;/i&gt; &lt;a
href=&#34;http://cl-informatik.uibk.ac.at/isafor&#34;&gt;IsaFoR&lt;/a&gt;,
where first-order terms are omni-present: the unification algorithm is
used to certify several confluence and termination techniques, like
critical-pair computation and dependency graph approximations; and the
subsumption order is a crucial ingredient for completion.</description>
    </item>
    <item>
       <title>The Error Function</title>
              <link>https://www.isa-afp.org/entries/Error_Function.html</link>
       <guid>https://www.isa-afp.org/entries/Error_Function.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>06 Feb 2018 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt; This entry provides the definitions and basic properties of
the complex and real error function erf and the complementary error
function erfc. Additionally, it gives their full asymptotic
expansions. &lt;/p&gt;</description>
    </item>
    <item>
       <title>A verified LLL algorithm</title>
              <link>https://www.isa-afp.org/entries/LLL_Basis_Reduction.html</link>
       <guid>https://www.isa-afp.org/entries/LLL_Basis_Reduction.html</guid>
       <dc:creator> Jose Divasón, Sebastiaan Joosten, René Thiemann, Akihisa Yamada       </dc:creator>
       <pubDate>02 Feb 2018 00:00:00 +0000</pubDate>
       <description>
The Lenstra-Lenstra-Lovász basis reduction algorithm, also known as
LLL algorithm, is an algorithm to find a basis with short, nearly
orthogonal vectors of an integer lattice. Thereby, it can also be seen
as an approximation to solve the shortest vector problem (SVP), which
is an NP-hard problem, where the approximation quality solely depends
on the dimension of the lattice, but not the lattice itself. The
algorithm also possesses many applications in diverse fields of
computer science, from cryptanalysis to number theory, but it is
specially well-known since it was used to implement the first
polynomial-time algorithm to factor polynomials. In this work we
present the first mechanized soundness proof of the LLL algorithm to
compute short vectors in lattices. The formalization follows a
textbook by von zur Gathen and Gerhard.</description>
    </item>
    <item>
       <title>Formalization of Bachmair and Ganzinger's Ordered Resolution Prover</title>
              <link>https://www.isa-afp.org/entries/Ordered_Resolution_Prover.html</link>
       <guid>https://www.isa-afp.org/entries/Ordered_Resolution_Prover.html</guid>
       <dc:creator> Anders Schlichtkrull, Jasmin Christian Blanchette, Dmitriy Traytel, Uwe Waldmann       </dc:creator>
       <pubDate>18 Jan 2018 00:00:00 +0000</pubDate>
       <description>
This Isabelle/HOL formalization covers Sections 2 to 4 of Bachmair and
Ganzinger&#39;s &#34;Resolution Theorem Proving&#34; chapter in the
&lt;em&gt;Handbook of Automated Reasoning&lt;/em&gt;. This includes
soundness and completeness of unordered and ordered variants of ground
resolution with and without literal selection, the standard redundancy
criterion, a general framework for refutational theorem proving, and
soundness and completeness of an abstract first-order prover.</description>
    </item>
    <item>
       <title>An Isabelle/HOL formalisation of Green's Theorem</title>
              <link>https://www.isa-afp.org/entries/Green.html</link>
       <guid>https://www.isa-afp.org/entries/Green.html</guid>
       <dc:creator> Mohammad Abdulaziz, Lawrence C. Paulson       </dc:creator>
       <pubDate>11 Jan 2018 00:00:00 +0000</pubDate>
       <description>
We formalise a statement of Green’s theorem—the first formalisation to
our knowledge—in Isabelle/HOL. The theorem statement that we formalise
is enough for most applications, especially in physics and
engineering. Our formalisation is made possible by a novel proof that
avoids the ubiquitous line integral cancellation argument. This
eliminates the need to formalise orientations and region boundaries
explicitly with respect to the outwards-pointing normal vector.
Instead we appeal to a homological argument about equivalences between
paths.</description>
    </item>
    <item>
       <title>Taylor Models</title>
              <link>https://www.isa-afp.org/entries/Taylor_Models.html</link>
       <guid>https://www.isa-afp.org/entries/Taylor_Models.html</guid>
       <dc:creator> Christoph Traut, Fabian Immler       </dc:creator>
       <pubDate>08 Jan 2018 00:00:00 +0000</pubDate>
       <description>
We present a formally verified implementation of multivariate Taylor
models. Taylor models are a form of rigorous polynomial approximation,
consisting of an approximation polynomial based on Taylor expansions,
combined with a rigorous bound on the approximation error. Taylor
models were introduced as a tool to mitigate the dependency problem of
interval arithmetic. Our implementation automatically computes Taylor
models for the class of elementary functions, expressed by composition
of arithmetic operations and basic functions like exp, sin, or square
root.</description>
    </item>
    <item>
       <title>The Falling Factorial of a Sum</title>
              <link>https://www.isa-afp.org/entries/Falling_Factorial_Sum.html</link>
       <guid>https://www.isa-afp.org/entries/Falling_Factorial_Sum.html</guid>
       <dc:creator> Lukas Bulwahn       </dc:creator>
       <pubDate>22 Dec 2017 00:00:00 +0000</pubDate>
       <description>
This entry shows that the falling factorial of a sum can be computed
with an expression using binomial coefficients and the falling
factorial of its summands. The entry provides three different proofs:
a combinatorial proof, an induction proof and an algebraic proof using
the Vandermonde identity.  The three formalizations try to follow
their informal presentations from a Mathematics Stack Exchange page as
close as possible. The induction and algebraic formalization end up to
be very close to their informal presentation, whereas the
combinatorial proof first requires the introduction of list
interleavings, and significant more detail than its informal
presentation.</description>
    </item>
    <item>
       <title>The Median-of-Medians Selection Algorithm</title>
              <link>https://www.isa-afp.org/entries/Median_Of_Medians_Selection.html</link>
       <guid>https://www.isa-afp.org/entries/Median_Of_Medians_Selection.html</guid>
       <dc:creator> Manuel Eberl       </dc:creator>
       <pubDate>21 Dec 2017 00:00:00 +0000</pubDate>
       <description>
&lt;p&gt;This entry provides an executable functional implementation
of the Median-of-Medians algorithm for selecting the
&lt;em&gt;k&lt;/em&gt;-th smallest element of an unsorted list
deterministically in linear time. The size bounds for the recursive
call that lead to the linear upper bound on the run-time of the
algorithm are also proven. &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
